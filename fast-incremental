#!/bin/bash

# fast-incremental

# This script is to be run on a tilt-series acquired in SerialEM using the fast-incremental
# method where blank frames are not saved.

# The script will run ccderaser to remove deviant pixels, then motion-correct each range of
# non-blank frames and generate a final stack with each tilt angle in the correct order,
# along with a .rawtlt file containing tilt angle information.

# Gain normalization and defects correction are done using either Alignframes or Motioncor2.
# If using Motioncor2, the full path to the Motioncor2 executable must be provided below.

# Copyright (C) 2018 Georges Chreifi
# Please credit appropriately. 

### USER INPUTS ###
mcorpath="/usr/local/relion/bin/MotionCor2_1.1.0-Cuda90" # CHANGE ACCORDING TO THE MOTIONCOR2 PATH ON THE MACHINE
gpu="0" # GPU to use, separated by space.
throw=1 #  Number of initial frames to discard from motioncor. These frames are not included in the alignment or the final average.
trunc=1 # Number of trailing frames to discard from motioncor. These frames are not included in the alignment or the final average.
removefirstandlastframes=1 # Will discard the initial and last frame in alignframes. These frames are not included in the alignment or the final average. Can't currently be tuned, only turned on or off. 
doseperframe=""
binning=1; rem=1; remcheck="both"; cleanup=1;

file=$1 # input tilt series
angles=$2 # Angles file
phi=$3 # Tilt axis for the flipped/rotated stack.
keep=$4 # enter 1 to delete, or 2 to save the 1-extracted/ folder for later processing (default is 1, delete)
mcor=$5 # enter 1 to do motion-correction with alignframes, and 2 to do motion-correction with motioncor2 (default is 1, alignframes).
dose=$6 # Dose per tilt ( total dose in e/A2 divided by number of tilts). This option is currently only necessary for dose-filtering later with matlab script
saved=$( eval ls *saved.txt 2>/dev/null) # file describing frames above threshold that were saved
if [ "$file" = "-h" ]; then 
    echo ""
    echo "Fastincremental    - Usage:"
    echo "file=\$1           - Input tilt series"
    echo "angles=\$2         - Angles file"
    echo "phi=\$3            - Tilt axis for the flipped/rotated stack."
    echo "keep=\$4           - enter 1 to delete, or 2 to save the 1-extracted/ folder (~33GB) for later processing (default is 1, delete)"
    echo "mcor=\$5           - enter 1 to do motion-correction with alignframes, and 2 to do motion-correction with motioncor2 (default is 1, alignframes)."
    echo "dose=\$6           - Dose per tilt ( total dose in e/A2 divided by number of tilts). This option is currently only necessary for dose-filtering later with matlab script."
    exit 1;
fi
pix=$(header $file | awk '/Pixel spacing/ {print $4}')
if [ "$keep" = "" ]; then keep=1; fi
if [ "$mcor" = "" ]; then mcor=1; fi
if [ "$mcor" = "2" ]; then 
    rf=$(header $file | grep -o -P 'r/f.{0,2}' | sed 's/r\/f //g')
    if [ "$rf" = "1" ]; then rot=1; flip=0; fi
    if [ "$rf" = "2" ]; then rot=2; flip=0; fi
    if [ "$rf" = "3" ]; then rot=3; flip=0; fi
    if [ "$rf" = "5" ]; then rot=1; flip=2; fi
    if [ "$rf" = "6" ]; then rot=2; flip=2; fi
    if [ "$rf" = "7" ]; then rot=3; flip=2; fi
fi
########################

if [ -e cutviews.log ]; then
    echo "Already removed first and last frames from input tilt-series. Skipping frame removal"
    saved=saved.txt
else
    if [ "$remcheck" = "both" ]; then
        echo "Removing first and last frame from input tilt series. By serialEM default, these frames are usually blank."
        last=$(header $file | awk '/Number of columns/ {print $9}')
        excludeviews -s $file -v 1,"$last"
        head -n -1 $saved | tail -n +2 > saved.txt2
        mv saved.txt2 saved.txt
        saved=saved.txt
        echo "Removed first and last frame from input tilt series" > cutviews.log
    fi
    if [ "$remcheck" = "first" ]; then
    excludeviews -s $file -v 1
    sed 1d $saved > saved.txt2
    mv saved.txt2 saved.txt
    saved=saved.txt
    fi
fi

if [ "$file" = "" ]; then eval ls; echo "Enter file name"; read file; fi
name=$( echo $file | rev | cut -d "." -f2,3,4,5 | rev )

defects=$(ls defects*.txt); countref=$(ls CountRef*)

echo "Running Ccderaser..."
ccderaser -f -pe 8 -d 6 -gr 4 -s 3 -gi 12 -la 8 -bi 19 -w 2.0 -x 100 -ed 4 -in "$file" -outp "$name".st
echo "Ran ccderaser on "$file". Output: "$name".st" > ccderased.log

rm -f col1.txt
start=1; end=$(wc -l < $angles); while [ "$start" -le "$end" ]; do echo "$start" >> col1.txt; start=$(( $start + 1 )); done
sed "s/$(printf '\r')\$//" $angles > angles.txt
paste -d' ' col1.txt angles.txt > col2.txt
paste -d, angles.txt col1.txt > order_list.csv
rm -f "$saved"2
awk '$1!=q+1{if(NR>0)print c; c=0} {q=$1; c++} END{print c}' "$saved" | awk '(NR>0) && ($1 > 3)' > "$saved"2 # extract number of frames per tilt and delete errors

num1=0; num2=0; start=1; end=$(wc -l < "$saved"2)
if [ "$removefirstandlastframes" = "1" ] && [ "$mcor" = 1 ]; then num2=-1; else num2=0; fi
while [ "$start" -le "$end" ]; do 
    stack=$(head -1 "$saved"2)  
    if [ "$mcor" = "1" ]; then         
        if [ "$removefirstandlastframes" = "1" ]; then num1=$(( $num2 + 3 )); num2=$(( $num1 + $stack - 3)); else num1=$(( $num2 + 1 )); num2=$(( $num1 + $stack - 1)); fi
    fi
    if [ "$mcor" = "2" ]; then
        num1=$(( $num2 + 1 ))
        num2=$(( $num1 + $stack - 1))
    fi
    echo ""$num1"-"$num2"" >> col3.txt
    sed -i 1d "$saved"2
    start=$(( $start + 1 ))
done

num1=$( wc -l < col2.txt ); num2=$( wc -l < col3.txt)
if [ "$num1" -gt "$num2" ]; then 
    numtot=$(( $num1 - $num2 ))
    head -n -"$numtot" col2.txt > col4.txt
    mv col4.txt col2.txt
fi
paste -d' ' col2.txt col3.txt > list.txt
sort -k2 -n -o list.txt list.txt
list=list.txt

start=1;end=$(wc -l < $list); rm -f order.txt
while [ "$start" -le "$end" ]; do 
    echo $start >> order.txt
    start=$(( $start + 1 ))
done
paste order.txt <(cut -d' ' -f2 $list) > finalorder.txt

if [ "$mcor" = "1" ]; then echo "Extracting frames and motion-correcting with alignframes..."; fi
if [ "$mcor" = "2" ]; then echo "Extracting frames and motion-correcting with motioncor2..."; echo "Will use -RotGain $rot and -FlipGain $flip"; fi
if [ "$keep" = "1" ]; then echo "Will not save individual frames after alignment"; fi
if [ "$keep" = "2" ]; then echo "Will save individual frames in 1-extracted/"; fi

mkdir -p 1-extracted 2-aligned
start=1
end=$(wc -l < $list)
cp $list templist.txt
echo -n "newstack " > 2-aligned/newstack.sh
while [ "$start" -le "$end" ]; do
    range=$(head -1 templist.txt | awk '{print $3}')
    newstack -mode 2 -fromone -secs $range -input "$name".st -output "$name"_"$start".st
    if [ "$mcor" = "1" ]; then 
        echo "alignframes run" > "$name".log
        alignframes -GainReferenceFile $countref -total 32 -RotationAndFlip -1 -defect $defects -PairwiseFrames -1 -AlignAndSumBinning 2,1 -refine 5 -antialias 5 -vary 0.05,0.06,0.08,0.1,0.125 -in "$name"_"$start".st -ou "$name"_"$start"_af.mrc -xfext x >> "$name".log; type="af"
    fi
    if [ "$mcor" = "2" ]; then
        $mcorpath -InMrc "$name"_"$start".st -OutMrc "$name"_"$start"_"mcor".mrc -Gpu "$gpu" -Patch 5 5 -Iter 10 -Tol 0.1 -Throw "$throw" -Trunc "$trunc" -Group 2 -Kv 300 -PixSize "$pix" -FmDose "$doseperframe" -Gain $countref -GainFlip $flip > "$name"_"$start"_mcor.x; type="mcor"
    fi
    mv "$name"_"$start".st 1-extracted/
    mv "$name"_"$start"_"$type".mrc 2-aligned/
    mv *.x 2-aligned/
    
    echo -n "2-aligned/"$name"_"$start"_"$type".mrc " >> 2-aligned/newstack.sh
    sed -i 1d templist.txt
    start=$(( $start + 1 ))
done
echo ""$name"_"$type".mrc" >> 2-aligned/newstack.sh
mv "$name".log 2-aligned/

echo "Combining motion-corrected frames into a single stack..."
bash 2-aligned/newstack.sh
echo "Done!"

awk '{print $2}' $list > "$name"_"$type".rawtlt

#### cleanup #####
if [ "$cleanup" = "1" ]; then
    if [ -e "$name"_"$type".mrc ]; then
        rm 2-aligned/newstack.sh
        rm -rf 2-aligned/*.mrc
    else
        echo "Something went wrong! "$name"_"$type".mrc was not properly generated!"
    fi
    rm -f "$file".norm "$name".st
fi
if [ "$keep" = "1" ]; then 
    rm -rf 1-extracted/
fi
mkdir -p logs
mv -t logs/ col1.txt col2.txt col3.txt saved.txt list.txt saved.txt2 templist.txt checklist.txt checklist2.txt angles.txt finalorder.txt 2>/dev/null
####################